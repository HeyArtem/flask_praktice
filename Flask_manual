Flask

$ mkdir flask_praktice
$ cd flask_praktice/
$ python3 -m venv venv
$ source venv/bin/activate

$ sudo apt update
$ sudo apt upgrade -y 
$ sudo apt autoremove
$ sudo apt autoclean 

$ pip install -U pip setuptools Flask

$ touch app.py (рекомендовано всегда назыать app.py)
$ code .


        from flask import Flask


        app = Flask(__name__)


        @app.route("/")
        def hello_world():
           return "Hello, World!"


        def main():
            app.run(debug=True)


        if __name__ == "__main__":
            main()


# start
$ python app.py 

открываю в браузер на указанном порту (* Running on http://127.0.0.1:5000). В браузере будет "Hello, World!"


Добавляю словарь и функцию которая его выводит:
        from flask import Flask


        app = Flask(__name__)


        # декоратор ('это базовый или отцовский) route используется, чтобы связать URL адрес (http://127.0.0.1:5000/)  с функцией
        @app.route("/")
        def hello_world():
            return "Hello, World!"


        about_me = {
           "name": "Евгений",
           "surname": "Юрченко",
           "email": "eyurchenko@specialist.ru"
        }


        @app.route("/about")
        def about():
           return about_me


        def main():
            app.run(debug=True) #debug=True - включен режим отладки (как будто перезагружать не нужно после изменения, так же будет отчет об ошипбке на HTML-СТРАНИЦЕ)


        if __name__ == "__main__":
            main()

Запускаю
$ python app.py
и увижу неправильный вывод инфы. Не выводится русский текст! Нужно добавить:
        app = Flask(__name__)
        app.config['JSON_AS_ASCII'] = False

Запускаю
$ python app.py
все ок, выводится русский текст

Допишу новый url и функцию:
        from flask import Flask


        app = Flask(__name__)
        app.config['JSON_AS_ASCII'] = False


        # декоратор ('это базовый или отцовский) route используется, чтобы связать URL адрес (http://127.0.0.1:5000/)  с функцией
        @app.route("/")
        def hello_world():
            return "Hello, World!"


        about_me = {
           "name": "Артем",
           "surname": "Рожков",
           "email": "artem_white@mail.ru"
        }


        @app.route("/about")
        def about():
           return about_me


        art_lite_dict = {
            'avto': 'Lexus',
            'side': 'South',
            'color': 'Red',
        }


        # url = /art
        @app.route("/art")
        def art_lite():
           return art_lite_dict


        def main():
            app.run(debug=True) #debug=True - включен режим отладки (как будто перезагружать не нужно после изменения, так же будет отчет об ошипбке на HTML-СТРАНИЦЕ)


        if __name__ == "__main__":
            main()
           
Запускаю
$ python app.py, выводится мой словарь


Теперь работаю со списком словарей. Создаю список словарей quotes и функцию с декоратором:
        from flask import Flask


        app = Flask(__name__)
        app.config['JSON_AS_ASCII'] = False


        quotes = [
           {
               "id": 3,
               "author": "Rick Cook",
               "text": "Программирование сегодня — это гонка разработчиков программ, стремящихся писать программы с большей и лучшей идиотоустойчивостью, и вселенной, которая пытается создать больше отборных идиотов. Пока вселенная побеждает."
           },
           {
               "id": 5,
               "author": "Waldi Ravens",
               "text": "Программирование на С похоже на быстрые танцы на только что отполированном полу людей с острыми бритвами в руках."
           },
           {
               "id": 6,
               "author": "Mosher’s Law of Software Engineering",
               "text": "Не волнуйтесь, если что-то не работает. Если бы всё работало, вас бы уволили."
           },
           {
               "id": 8,
               "author": "Yoggi Berra",
               "text": "В теории, теория и практика неразделимы. На практике это не так."
           },

        ]


        # декоратор ('это базовый или отцовский) route используется, чтобы связать URL адрес (http://127.0.0.1:5000/)  с функцией
        @app.route("/")
        def hello_world():
            return "Hello, World!"


        about_me = {
           "name": "Артем",
           "surname": "Рожков",
           "email": "artem_white@mail.ru"
        }


        @app.route("/about")
        def about():
           return about_me


        art_lite_dict = {
            'avto': 'Lexus',
            'side': 'South',
            'color': 'Red',
        }


        # url = /art
        @app.route("/art")
        def art_lite():
           return art_lite_dict

        # вывод цитат
        @app.route("/quotes")
        def get_all_quotes():
           return quotes


        def main():
            app.run(debug=True) #debug=True - включен режим отладки (как будто перезагружать не нужно после изменения, так же будет отчет об ошипбке на HTML-СТРАНИЦЕ)


        if __name__ == "__main__":
            main()

Запускаю
$ python app.py
все ок, цитаты в браузере


СОЗДАМ ФУНКЦИЮ, КОТОРАЯ ВЫВЕДЕТ КОЛИЧЕСТВО ЦИТАТ И ЧТО БЫ ВОВД БЫЛ СЛОВАРЕМ:
        # счетчик количества цитат. Внимание в url идет корневой каталог(quotes)/объект с которым работаем(digital)/digital
        @app.route("/quotes/digital")
        def get_all_quotes_digital():
            return {
                "digital": len(quotes)
            }
Запускаю
$ python app.py
все ок, в браузере:
        {
          "digital": 4
        }
        
        
СДЕЛАЮ ФУНКЦ И URL СЛУЧАЙНЫХ ЦИТАТ:
        from flask import Flask
        import random


        app = Flask(__name__)
        app.config['JSON_AS_ASCII'] = False


        quotes = [
           {
               "id": 3,
               "author": "Rick Cook",
               "text": "Программирование сегодня — это гонка разработчиков программ, стремящихся писать программы с большей и лучшей идиотоустойчивостью, и вселенной, которая пытается создать больше отборных идиотов. Пока вселенная побеждает."
           },
           {
               "id": 5,
               "author": "Waldi Ravens",
               "text": "Программирование на С похоже на быстрые танцы на только что отполированном полу людей с острыми бритвами в руках."
           },
           {
               "id": 6,
               "author": "Mosher’s Law of Software Engineering",
               "text": "Не волнуйтесь, если что-то не работает. Если бы всё работало, вас бы уволили."
           },
           {
               "id": 8,
               "author": "Yoggi Berra",
               "text": "В теории, теория и практика неразделимы. На практике это не так."
           },

        ]


        # декоратор ('это базовый или отцовский) route используется, чтобы связать URL адрес (http://127.0.0.1:5000/)  с функцией
        @app.route("/")
        def hello_world():
            return "Hello, World!"


        about_me = {
           "name": "Артем",
           "surname": "Рожков",
           "email": "artem_white@mail.ru"
        }


        @app.route("/about")
        def about():
           return about_me


        art_lite_dict = {
            'avto': 'Lexus',
            'side': 'South',
            'color': 'Red',
        }


        # url = /art
        @app.route("/art")
        def art_lite():
           return art_lite_dict

        # вывод цитат
        @app.route("/quotes")
        def get_all_quotes():
           return quotes


        # счетчик количества цитат. Внимание в url идет корневой каталог(quotes)/объект с которым работаем(digital)/digital
        @app.route("/quotes/digital")
        def get_all_quotes_digital():
            return {
                "digital": len(quotes)
            }


        # вывод рандомных цитат
        @app.route("/quotes/random")
        def get_all_quotes_random():
            return random.choice(quotes)


        def main():
            app.run(debug=True) #debug=True - включен режим отладки (как будто перезагружать не нужно после изменения, так же будет отчет об ошипбке на HTML-СТРАНИЦЕ)


        if __name__ == "__main__":
            main()
            
Запускаю
$ python app.py
при обновлении страницы, выводится рандомная цитата



       -- СТИЛИ -- 

        |--app.py
        |
        |--static
        |    |
        |    |--CSS
        |    |--js
        |        |--large.js
        |
        |--templates
              |--index.html

Не забудь, подключить стили а страницах  html:
         <title>main_uai</title>
         <!-- Ссылка на страницу со стилями -->
         <link rel="stylesheet" href="/static/css/main.css">



        -- Работа с БД sqlite3  Duda--
$pip install flask-sqlalchemy

        from flask_sqlalchemy import SQLAlchemy
        from datetime import datetime
        
        app = Flask(__name__)
        app.config['JSON_AS_ASCII'] = False

        # устанавливаю значение БД с которой буду работать
        app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///blog.db'

        # создание объекта db
        db = SQLAlchemy(app)
        
        # создаю класс который будет представлять табличку в базе данных
        class Article(db.Model):
            id = db.Column(db.Integer, primary_key=True)
            title = db.Column(db.String(100), nullable=False)
            intro = db.Column(db.String(300), nullable=False)
            text = db.Column(db.Text, nullable=False)
            date = db.Column(db.DateTime, default=datetime.utcnow)

            # когда буду выбирать объект, то буду получать и объект и id
            def __repr__(self) -> str:
                return '<Article %r>' % self.id     # !! переделать на нов f row
        
in terminal:
        $ python
        from app import app, db
        app.app_context().push()
        db.create_all()
                В проекте создалассь папка instance/blog.db
                выход из интерактивного режима ctrl+d

new handlers:

        @app.route("/about")
        def about():
            return render_template("about.html")        
        
        @app.route("/create-article", method=["POST", "GET"])
        def create_article():
            return render_template("create-article.html")


in template/create-article.html:

        {% extends "base.html" %}

        {% block title %}
            Страница про нас
        {% endblock %}

        {% block body %}
            <div class="container mt-5">
                <h1>Добавление статьи</h1>
                <form method="post">
                    <input type="text" placeholder="Введите название" name="title" id="title" class="form-control"><br>
                    <textarea name="intro" placeholder="Введите анонс" id="intro" class="form-control"></textarea><br>
                    <textarea name="text" placeholder="Введите основной текст" id="text" class="form-control"></textarea><br>
                    <input type="submit" class="btn btn-success" value="Отправить">
                </form>
            </div>
        {% endblock %}


in template/about.html:
        {% extends "base.html" %}

        {% block title %}
            Страница про нас
        {% endblock %}

        {% block body %}
            <div class="container">
                <h1>Страница про нас</h1>
            </div>
        {% endblock %}


screen app.py:
        from flask import Flask, abort, request, render_template, url_for
        import random
        import sqlite3
        from flask_sqlalchemy import SQLAlchemy
        from datetime import datetime

        '''
        Различные примеры flask из разных источников
        '''

        app = Flask(__name__)
        # позволяет славянский шрифт (когда вывод без html)
        app.config['JSON_AS_ASCII'] = False

        # устанавливаю значение БД с которой буду работать
        app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///blog.db'

        # создание объекта db
        db = SQLAlchemy(app)


        # декоратор ('это базовый или отцовский) route используется, чтобы связать URL адрес (http://127.0.0.1:5000/)  с функцией
        @app.route("/")
        def hello_world():
            return "Hello, World!"


        @app.route("/about")
        def about():
            return render_template("about.html")


        # about_me = {
        #    "name": "Артем",
        #    "surname": "Рожков",
        #    "email": "artem_white@mail.ru"
        # }


        # # возвращает словарь about_me
        # @app.route("/about")
        # def about():
        #    return about_me


        art_lite_dict = {
            'avto': 'Lexus',
            'side': 'South',
            'color': 'Red',
        }


        # возвращает art_lite_dict
        @app.route("/art")
        def art_lite():
           return art_lite_dict



        # создаю класс который будет представлять табличку в базе данных
        class Article(db.Model):
            id = db.Column(db.Integer, primary_key=True)
            title = db.Column(db.String(100), nullable=False)
            intro = db.Column(db.String(300), nullable=False)
            text = db.Column(db.Text, nullable=False)
            date = db.Column(db.DateTime, default=datetime.utcnow)

            # когда буду выбирать объект, то буду получать и объект и id
            def __repr__(self) -> str:
                return '<Article %r>' % self.id     # !! переделать на нов f row


        @app.route("/create-article", method=["POST", "GET"])
        def create_article():
            return render_template("create-article.html")



        # пример вычленение name & id из url
        @app.route("/user/<string:name>/<int:id>")
        def user(name, id):
            return "User page: " + name + "--" + str(id)


        quotes = [
           {
               "id": 1,
               "author": "Rick Cook",
               "text": "Программирование сегодня — это гонка разработчиков программ, стремящихся писать программы с большей и лучшей идиотоустойчивостью, и вселенной, которая пытается создать больше отборных идиотов. Пока вселенная побеждает."
           },
           {
               "id": 2,
               "author": "Waldi Ravens",
               "text": "Программирование на С похоже на быстрые танцы на только что отполированном полу людей с острыми бритвами в руках."
           },
           {
               "id": 3,
               "author": "Mosher’s Law of Software Engineering",
               "text": "Не волнуйтесь, если что-то не работает. Если бы всё работало, вас бы уволили."
           },
           {
               "id": 4,
               "author": "Yoggi Berra",
               "text": "В теории, теория и практика неразделимы. На практике это не так."
           },

        ]


        # вывод цитат через html в templates
        @app.route("/quotes")
        def get_all_quotes():   
           return render_template('main.html', data = quotes)


        # счетчик количества цитат. Внимание в url идет корневой каталог(quotes)/объект с которым работаем(digital)/digital
        @app.route("/quotes/digital")
        def get_all_quotes_digital():
            return {
                "digital": len(quotes)
            }


        # вывод рандомных цитат
        @app.route("/quotes/random")  
        def get_all_quotes_random():
            # return random.choice(quotes)
            return random.choice(quotes)


        # возврещение цитаты по id, использую ХИНТИНГ 
        # чтобы прервать запрос с кодом ошибки используйте функцию abort()
        @app.route("/quotes/<int:id>")
        def get_quote(id):
            for quote in quotes:
                if quote["id"] == id:
                    return quote
            abort(404, f"Цитата {id} не найдена")


        '''
        перехожу во postman, создаю запросЫ

        вывод цитат:
            GET 
            http://127.0.0.1:5000/quotes    

        добавление новой цитаты:
            post-запрос создания новой цитаты:
            http://127.0.0.1:5000/quotes
            body-raw-json
            {
            "author": "Pushkin",
            "text": "Text Pushkin Text Pushkin Text Pushkin "
            }

        удаление цитаты:
            DELETE
            http://127.0.0.1:5000/quotes/(номер удаляемой цитаты)


        POST — создание объекта и отправка данных на сервер;
        GET — получение информации с сервера;
        PUT — обновление объекта;
        DELETE — удаление объекта.
        '''

        # # вывод цитат без использования стилей и для PostMan (выше есть вывоод на html)
        # @app.route("/quotes")
        # def get_all_quotes():
        #    return quotes


        # создание новой цитаты через postman
        # @app.route("/quotes", methods=['POST'])
        @app.post("/quotes")    # Втрой способ написания хэндлера!!!
        def created_post():
            new_quote = request.json    

            # id последней цитаты
            last_id = quotes[-1]["id"]

            # добавляю id новой цитаты
            new_quote["id"] = last_id + 1

            # записываю новую цитату
            quotes.append(new_quote)
            
            # print(type(new_quote))
            return new_quote, 201


        # создание новой цитаты через форму на html странице
        @app.post("/quotes_form")
        def create_post_site():
            author = request.form["author"]
            text = request.form["text"]

            last_id = quotes[-1]["id"]
            new_id = last_id + 1

            new_quotes = {
                "id": new_id,
                "author": author,
                "text": text
            }

            quotes.append(new_quotes)
            return render_template("new_quote.html", data=new_quotes)


        # удаление цитаты через postman
        @app.route("/quotes/<int:id>", methods=['DELETE'])
        # @app.delete("/quotes/<int:id>")   # второй вариант написания хэндлера,без прописывания methods=['DELETE']
        def delete_post(id):    
            for quote in quotes:       
                if id == quote["id"]:
                    quotes.remove(quote)
                    return f"Цитата {id} удалена", 200
            # выполняется abort & python дальше не думет
            abort(404, f"Указанного id= {id}, не существует")    


        def main():
            app.run(debug=True) #debug=True - включен режим отладки (как будто перезагружать не нужно после изменения, так же будет отчет об ошипбке на HTML-СТРАНИЦЕ)


        if __name__ == "__main__":
            main()
           
change @app.route("/create-article":

        @app.route("/create-article", method=["POST", "GET"])
        def create_article():

            # принимаю данные из формы
            if request.method == "POST":
                title = request.form["title"]
                intro = request.form["intro"]
                text = request.form["text"]

                # передаю данные в экземпляр класса
                article = Article(title=title, intro=intro, text=text)

                # сохраняю в БД
                try:
                    db.session.add(article) #добавляю
                    db.session.commit() #сохраняю
                    return redirect("/") #переадресовываю пользователя на главную страницу
                except:
                    return "При добавлении статьи произошла ошибка"
            else:
                return render_template("create-article.html")
                
Выведем посты:
        @app.route("/posts")
        def posts():

            # # получение первой записи из БД
            # articles = Article.query.first()

            # # получить все записи из БД
            # articles = Article.query.all()
            
            # # все посты + сортировка по дате (по возрастанию)
            # articles = Article.query.order_by(Article.date).all()

            # все посты + сортировка по дате (по убыванию)
            articles = Article.query.order_by(Article.date.desc()).all()

            return render_template("posts.html", articles=articles)

in template create posts.html:
        {% extends "base.html" %}

        {% block title %}
            Все статьи.    
        {% endblock %}

        {% block body %}
            <div class="container mt-5">
                <h1>Все статьи на сайте</h1>

                {% for art in articles %}
                    <div class="alert alert-info">
                        <h2>{{ art.title }}</h2>
                        <p>{{ art.intro }}</p>
                        <p><b>Дата: {{ art.date.date() }}</b></p>
                        <a href="/posts/{{ art.id }}" class="btn btn-warning">Детальнее</a>                
                    </div>
                {% endfor %}
            </div>
        {% endblock %}



Сделаю логику кнопки "детальнее":
        @app.route("/posts/<int:id>")
        def post_detail(id):
            article = Article.query.get(id)
            return render_template("post_detail.html", article=article)
  
create post_detail.html:
        {% extends "base.html" %}

        {% block title %}
            {{ article.title }}    
        {% endblock %}

        {% block body %}
            <div class="container mt-5">
                <h1>{{ article.title }}</h1>
                <div class="alert alert-info">                
                    <p>{{ article.text }}</p>
                    <p><b>Дата: {{ article.date.date() }}</b></p>                
                </div>        
            </div>    
        {% endblock %}


create button Delete & Update. 
In post_detail.html:

        {% extends "base.html" %}

        {% block title %}
            {{ article.title }}    
        {% endblock %}

        {% block body %}
            <div class="container mt-5">
                <h1>{{ article.title }}</h1>
                <div class="alert alert-info">                
                    <p>{{ article.text }}</p>
                    <p><b>Дата: {{ article.date.date() }}</b></p>                
                    <a href="/posts/{{ article.id }}/del" class="btn btn-danger">Удалить</a>                
                    <a href="/posts/{{ article.id }}/update" class="btn btn-success">Редактровать</a>                
                </div>        
            </div>    
        {% endblock %}


create @app.route("/posts/<int:id>/del"):
        # удаление поста. get_or_404-работает, как get, но в случае отсутствия поста укажет 404
        @app.route("/posts/<int:id>/del")
        def post_delete(id):
            article = Article.query.get_or_404(id)

            try:
                db.session.delete(article)
                db.session.commit()
                return redirect("/posts")
            except:
                return "При удалении статьи произошла ошибка"


create post editing:
        # редактирование поста
        @app.route("/posts/<int:id>/update", methods=["POST", "GET"])
        def post_update(id):
            article = Article.query.get(id)

            # принимаю данные из формы
            if request.method == "POST":
                article.title = request.form["title"]
                article.intro = request.form["intro"]
                article.text = request.form["text"]

                try:
                    db.session.commit() #сохраняю
                    return redirect("/posts") #переадресовываю пользователя на главную страницу
                except:
                    return "При редактировании статьи произошла ошибка"            
            else:        
                return render_template("post_update.html", article=article)        
                
                
create "post_update.html":
        {% extends "base.html" %}

        {% block title %}
            Обновление статьи
        {% endblock %}

        {% block body %}
            <div class="container mt-5">
                <h1>Обновление статьи</h1>
                <form method="post">
                    <input type="text" placeholder="Введите название" name="title" id="title" class="form-control" value="{{ article.title }}" ><br>
                    <textarea name="intro" placeholder="Введите анонс" id="intro" class="form-control">{{ article.intro }}</textarea><br>
                    <textarea name="text" placeholder="Введите основной текст" id="text" class="form-control">{{ article.text }}</textarea><br>
                    <input type="submit" class="btn btn-success" value="Обновить">
                </form>
            </div>
        {% endblock %}


На странице со всеми постами, допишем текст, который будет выводиться, если не т постов
editting "base.html":

        {% extends "base.html" %}

        {% block title %}
            Все статьи.    
        {% endblock %}

        {% block body %}
            <div class="container mt-5">
                <h1>Все статьи на сайте</h1>
                
                <!-- условие, если не статей -->
                {% if articles|length > 0 %}
                    {% for art in articles %}
                        <div class="alert alert-info">
                            <h2>{{ art.title }}</h2>
                            <p>{{ art.intro }}</p>
                            <p><b>Дата: {{ art.date.date() }}</b></p>
                            <a href="/posts/{{ art.id }}" class="btn btn-warning">Детальнее</a>                
                        </div>
                    {% endfor %}

                {% else %}
                        <p>У нас еще нет статей.</p>
                {% endif %}
            </div>
        {% endblock %}




        -- Выложу сайт на Heroku --

 




ONLINE VEWER DB 
        https://sqliteviewer.app/
        












Вопросы:

            
-проговорить с Данилой Дандер методы

- мы не сделали хэндлеры GET & PUT

- дз реализовать общую структуру метода DELETE & POST

    
Один из способовs, с помощью которых мы можем установить DBeaver Community в Linux, чтобы это через Flatpak поэтому необходимо, чтобы в их системе была установлена ​​поддержка этой технологии.

https://blog.desdelinux.net/ru/dbeaver-una-excelente-herramienta-para-la-gestion-de-diferentes-db/

DBeaver Community распространяется для 64-битных и 32-битных архитектур, поэтому вы должны загрузить соответствующий пакет для вашей системной архитектуры.

Для тех, кто пользуется 64-битными системами, пакет для загрузки следующий:

wget https://dbeaver.io/files/dbeaver-ce_latest_amd64.deb

https://dbeaver.io/download/


- проговорить содержимое файла app_db.py, app_orm.py, что это за файлы, почему такие имена


-вот когда мы входим в ipython, что озанчают эти шаги [6], [8] ...



 с 2:02 по новвой ввожу команды
 2:24 разжевывание команд
 
 
 ######## Заметки  ######## 
 @app.route("/")        hello world
 @app.route("/about")   about me
 @app.route("/art")     art_lite_dict
 @app.route("/quotes")          all quotes
 @app.route("/quotes/digital")          len(quotes)
 @app.route("/quotes/random") 
 @app.route("/quotes/<int:id>")
 @app.route("/user/<string:name>/<int:id>")
 
 @app.post("/quotes")           new quotes postman
 @app.route("/quotes/<int:id>", methods=['DELETE'])
 
 @app.post("/quotes_form")              new quotes postman
   
         
 









